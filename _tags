# OASIS_START
# DO NOT EDIT (digest: d2688cb58768f4a9dc541c5efbd16a0f)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library email_message
"src/email_message.cmxs": use_email_message
"src/bigstringable.cmx": for-pack(Email_message)
"src/bigstring_shared.cmx": for-pack(Email_message)
"src/boundary.cmx": for-pack(Email_message)
"src/common.cmx": for-pack(Email_message)
"src/debug.cmx": for-pack(Email_message)
"src/email.cmx": for-pack(Email_message)
"src/email_regex.cmx": for-pack(Email_message)
"src/error_handling.cmx": for-pack(Email_message)
"src/field_list.cmx": for-pack(Email_message)
"src/field_name.cmx": for-pack(Email_message)
"src/grammar.cmx": for-pack(Email_message)
"src/grammar_types.cmx": for-pack(Email_message)
"src/headers.cmx": for-pack(Email_message)
"src/lexable.cmx": for-pack(Email_message)
"src/lexer.cmx": for-pack(Email_message)
"src/lexer_state.cmx": for-pack(Email_message)
"src/mailbox.cmx": for-pack(Email_message)
"src/media_type.cmx": for-pack(Email_message)
"src/mimestring.cmx": for-pack(Email_message)
"src/octet_stream.cmx": for-pack(Email_message)
"src/parser_intf.cmx": for-pack(Email_message)
"src/rfc.cmx": for-pack(Email_message)
"src/std.cmx": for-pack(Email_message)
"src/string_monoidable.cmx": for-pack(Email_message)
"src/string_monoid.cmx": for-pack(Email_message)
<src/*.ml{,i,y}>: package(async)
<src/*.ml{,i,y}>: package(core)
<src/*.ml{,i,y}>: package(core.syntax)
<src/*.ml{,i,y}>: package(core_extended)
<src/*.ml{,i,y}>: package(pa_ounit)
<src/*.ml{,i,y}>: package(pa_ounit.syntax)
<src/*.ml{,i,y}>: package(pa_test)
<src/*.ml{,i,y}>: package(pa_test.syntax)
<src/*.ml{,i,y}>: package(re2)
<src/*.ml{,i,y}>: package(threads)
# Executable find-destination-domains
<bin/find_destination_domains.{native,byte}>: package(async)
<bin/find_destination_domains.{native,byte}>: package(core)
<bin/find_destination_domains.{native,byte}>: package(core.syntax)
<bin/find_destination_domains.{native,byte}>: package(core_extended)
<bin/find_destination_domains.{native,byte}>: package(pa_ounit)
<bin/find_destination_domains.{native,byte}>: package(pa_ounit.syntax)
<bin/find_destination_domains.{native,byte}>: package(pa_test)
<bin/find_destination_domains.{native,byte}>: package(pa_test.syntax)
<bin/find_destination_domains.{native,byte}>: package(re2)
<bin/find_destination_domains.{native,byte}>: package(threads)
<bin/find_destination_domains.{native,byte}>: use_email_message
# Executable mailbox-test
<bin/mailbox_test.{native,byte}>: package(async)
<bin/mailbox_test.{native,byte}>: package(core)
<bin/mailbox_test.{native,byte}>: package(core.syntax)
<bin/mailbox_test.{native,byte}>: package(core_extended)
<bin/mailbox_test.{native,byte}>: package(pa_ounit)
<bin/mailbox_test.{native,byte}>: package(pa_ounit.syntax)
<bin/mailbox_test.{native,byte}>: package(pa_test)
<bin/mailbox_test.{native,byte}>: package(pa_test.syntax)
<bin/mailbox_test.{native,byte}>: package(re2)
<bin/mailbox_test.{native,byte}>: package(threads)
<bin/mailbox_test.{native,byte}>: use_email_message
# Executable mailbox-test-pipe
<bin/mailbox_test_pipe.{native,byte}>: package(async)
<bin/mailbox_test_pipe.{native,byte}>: package(core)
<bin/mailbox_test_pipe.{native,byte}>: package(core.syntax)
<bin/mailbox_test_pipe.{native,byte}>: package(core_extended)
<bin/mailbox_test_pipe.{native,byte}>: package(pa_ounit)
<bin/mailbox_test_pipe.{native,byte}>: package(pa_ounit.syntax)
<bin/mailbox_test_pipe.{native,byte}>: package(pa_test)
<bin/mailbox_test_pipe.{native,byte}>: package(pa_test.syntax)
<bin/mailbox_test_pipe.{native,byte}>: package(re2)
<bin/mailbox_test_pipe.{native,byte}>: package(threads)
<bin/mailbox_test_pipe.{native,byte}>: use_email_message
# Executable mailbox-wc
<bin/mailbox_wc.{native,byte}>: package(async)
<bin/mailbox_wc.{native,byte}>: package(core)
<bin/mailbox_wc.{native,byte}>: package(core.syntax)
<bin/mailbox_wc.{native,byte}>: package(core_extended)
<bin/mailbox_wc.{native,byte}>: package(pa_ounit)
<bin/mailbox_wc.{native,byte}>: package(pa_ounit.syntax)
<bin/mailbox_wc.{native,byte}>: package(pa_test)
<bin/mailbox_wc.{native,byte}>: package(pa_test.syntax)
<bin/mailbox_wc.{native,byte}>: package(re2)
<bin/mailbox_wc.{native,byte}>: package(threads)
<bin/mailbox_wc.{native,byte}>: use_email_message
# Executable test
<bin/test.{native,byte}>: package(async)
<bin/test.{native,byte}>: package(core)
<bin/test.{native,byte}>: package(core.syntax)
<bin/test.{native,byte}>: package(core_extended)
<bin/test.{native,byte}>: package(pa_ounit)
<bin/test.{native,byte}>: package(pa_ounit.syntax)
<bin/test.{native,byte}>: package(pa_test)
<bin/test.{native,byte}>: package(pa_test.syntax)
<bin/test.{native,byte}>: package(re2)
<bin/test.{native,byte}>: package(threads)
<bin/test.{native,byte}>: use_email_message
<bin/*.ml{,i,y}>: package(async)
<bin/*.ml{,i,y}>: package(core)
<bin/*.ml{,i,y}>: package(core.syntax)
<bin/*.ml{,i,y}>: package(core_extended)
<bin/*.ml{,i,y}>: package(pa_ounit)
<bin/*.ml{,i,y}>: package(pa_ounit.syntax)
<bin/*.ml{,i,y}>: package(pa_test)
<bin/*.ml{,i,y}>: package(pa_test.syntax)
<bin/*.ml{,i,y}>: package(re2)
<bin/*.ml{,i,y}>: package(threads)
<bin/*.ml{,i,y}>: use_email_message
# OASIS_STOP
<src/*.ml{,i}>: syntax_camlp4o
